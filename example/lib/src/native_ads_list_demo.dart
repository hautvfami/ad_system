import 'package:flutter/material.dart';
import 'package:google_mobile_ads/google_mobile_ads.dart';
import 'package:ad_system/ad_system.dart';
import 'package:get/get.dart';

/// M·ªôt l·ªõp demo ƒë·ªÉ hi·ªÉn th·ªã c√°ch hi·ªÉn th·ªã qu·∫£ng c√°o native xen k·∫Ω trong m·ªôt ListView
class NativeAdsListViewDemo extends StatefulWidget {
  const NativeAdsListViewDemo({Key? key}) : super(key: key);

  @override
  State<NativeAdsListViewDemo> createState() => _NativeAdsListViewDemoState();
}

class _NativeAdsListViewDemoState extends State<NativeAdsListViewDemo> {
  // Danh s√°ch c√°c m·ª•c d·ªØ li·ªáu (c√≥ th·ªÉ l√† b√†i vi·∫øt, tin t·ª©c, s·∫£n ph·∫©m, v.v.)
  final List<String> _items = List.generate(30, (index) => 'M·ª•c s·ªë $index');

  // Danh s√°ch ads ƒë√£ ƒë∆∞·ª£c t·∫£i
  final Map<int, NativeAd> _loadedAds = {};

  // V·ªã tr√≠ c√°c qu·∫£ng c√°o trong danh s√°ch (c·ª© m·ªói 5 m·ª•c s·∫Ω c√≥ 1 qu·∫£ng c√°o)
  final int _adInterval = 5;

  // ƒêang t·∫£i qu·∫£ng c√°o
  final _isLoading = false.obs;

  // K·∫øt qu·∫£ g·∫ßn nh·∫•t
  final _lastResult = ''.obs;

  @override
  void initState() {
    super.initState();
    // T·∫£i tr∆∞·ªõc m·ªôt s·ªë qu·∫£ng c√°o
    _preloadAds();
  }

  @override
  void dispose() {
    // Gi·∫£i ph√≥ng qu·∫£ng c√°o khi kh√¥ng c√≤n s·ª≠ d·ª•ng
    for (final ad in _loadedAds.values) {
      ad.dispose();
    }
    super.dispose();
  }

  // Best practice: T·∫£i tr∆∞·ªõc m·ªôt s·ªë qu·∫£ng c√°o ƒë·ªÉ s·∫µn s√†ng hi·ªÉn th·ªã
  void _preloadAds() {
    _isLoading.value = true;

    // T√≠nh to√°n c√≥ bao nhi√™u qu·∫£ng c√°o c·∫ßn t·∫£i
    int totalAdsNeeded = (_items.length / _adInterval).floor();

    // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng qu·∫£ng c√°o t·∫£i tr∆∞·ªõc (ƒë·ªÉ ti·∫øt ki·ªám t√†i nguy√™n)
    int preloadCount = totalAdsNeeded > 3 ? 3 : totalAdsNeeded;

    _lastResult.value = 'ƒêang t·∫£i tr∆∞·ªõc $preloadCount qu·∫£ng c√°o...';

    // T·∫£i tr∆∞·ªõc c√°c qu·∫£ng c√°o
    for (int i = 0; i < preloadCount; i++) {
      _loadAd(i);
    }

    _isLoading.value = false;
  }

  // T·∫£i m·ªôt qu·∫£ng c√°o cho v·ªã tr√≠ nh·∫•t ƒë·ªãnh trong ListView.builder
  void _loadAd(int adIndex) {
    // Chuy·ªÉn ƒë·ªïi adIndex th√†nh v·ªã tr√≠ hi·ªÉn th·ªã th·ª±c t·∫ø trong ListView
    final int listViewIndex = _getListViewIndexFromAdIndex(adIndex);
    
    debugPrint('ƒêang t·∫£i qu·∫£ng c√°o cho adIndex=$adIndex, v·ªã tr√≠ trong ListView: $listViewIndex');
    
    if (_loadedAds.containsKey(listViewIndex)) {
      debugPrint('Qu·∫£ng c√°o cho v·ªã tr√≠ $listViewIndex ƒë√£ ƒë∆∞·ª£c t·∫£i r·ªìi!');
      return; // ƒê√£ t·∫£i qu·∫£ng c√°o n√†y r·ªìi
    }

    // Th√™m ph·∫ßn debug ƒë·ªÉ xem tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa map
    _debugAdsStatus();

    AdsManager.instance.loadNativeAd(
      placementName: 'list_native_$adIndex',
      template: 'medium',
      onAdLoaded: (ad) {
        debugPrint('‚úÖ Qu·∫£ng c√°o cho v·ªã tr√≠ ListView $listViewIndex (adIndex=$adIndex) ƒë√£ t·∫£i TH√ÄNH C√îNG');
        // L∆∞u qu·∫£ng c√°o v·ªõi key ch√≠nh l√† v·ªã tr√≠ trong ListView
        _loadedAds[listViewIndex] = ad;
        _lastResult.value = 'ƒê√£ t·∫£i qu·∫£ng c√°o cho v·ªã tr√≠ $listViewIndex';
        
        // Hi·ªÉn th·ªã th√¥ng tin debug
        _debugAdsStatus();
        
        setState(() {}); // C·∫≠p nh·∫≠t UI
      },
      onAdFailedToLoad: (error) {
        debugPrint('‚ùå L·ªói t·∫£i qu·∫£ng c√°o cho v·ªã tr√≠ $listViewIndex: $error');
        _lastResult.value = 'L·ªói t·∫£i qu·∫£ng c√°o ·ªü v·ªã tr√≠ $listViewIndex: $error';
      },
    );
  }

  // Debug: Ki·ªÉm tra tr·∫°ng th√°i c·ªßa t·∫•t c·∫£ qu·∫£ng c√°o ƒë√£ t·∫£i
  void _debugAdsStatus() {
    debugPrint('\n==== DEBUG ADS STATUS ====');
    debugPrint('T·ªïng s·ªë qu·∫£ng c√°o ƒë√£ t·∫£i: ${_loadedAds.length}');
    _loadedAds.forEach((position, ad) {
      debugPrint('Qu·∫£ng c√°o t·∫°i v·ªã tr√≠ $position: ${ad.responseInfo}');
    });
    debugPrint('========================\n');
  }

  // Ki·ªÉm tra xem m·ªôt v·ªã tr√≠ c√≥ ph·∫£i l√† v·ªã tr√≠ qu·∫£ng c√°o kh√¥ng
  bool _isAdPosition(int index) {
    // C·ª© m·ªói _adInterval m·ª•c s·∫Ω c√≥ 1 qu·∫£ng c√°o
    // V√≠ d·ª•: v·ªõi _adInterval = 5, v·ªã tr√≠ 5, 11, 17, 23 ... s·∫Ω l√† qu·∫£ng c√°o
    bool isAd = index > 0 && index % (_adInterval + 1) == _adInterval;
    if (isAd) {
      debugPrint('üîç V·ªã tr√≠ $index l√† v·ªã tr√≠ qu·∫£ng c√°o');
    }
    return isAd;
  }

  // T√≠nh to√°n v·ªã tr√≠ th·ª±c c·ªßa m·ª•c d·ªØ li·ªáu, kh√¥ng t√≠nh qu·∫£ng c√°o
  int _getItemIndex(int position) {
    // S·ªë l∆∞·ª£ng qu·∫£ng c√°o tr∆∞·ªõc v·ªã tr√≠ hi·ªán t·∫°i
    int adCountBeforePosition = (position / (_adInterval + 1)).floor();
    // V·ªã tr√≠ th·ª±c trong danh s√°ch g·ªëc
    return position - adCountBeforePosition;
  }

  // T·ªïng s·ªë m·ª•c hi·ªÉn th·ªã (bao g·ªìm c·∫£ n·ªôi dung v√† qu·∫£ng c√°o)
  int get _totalItems {
    // S·ªë l∆∞·ª£ng qu·∫£ng c√°o s·∫Ω hi·ªÉn th·ªã
    int adCount = (_items.length / _adInterval).floor();
    // T·ªïng s·ªë m·ª•c = s·ªë l∆∞·ª£ng n·ªôi dung + s·ªë l∆∞·ª£ng qu·∫£ng c√°o
    int total = _items.length + adCount;
    debugPrint('T·ªïng s·ªë m·ª•c: $total (${_items.length} n·ªôi dung + $adCount qu·∫£ng c√°o)');
    return total;
  }
  
  // Chuy·ªÉn ƒë·ªïi t·ª´ adIndex sang v·ªã tr√≠ th·ª±c trong ListView
  int _getListViewIndexFromAdIndex(int adIndex) {
    return (adIndex + 1) * (_adInterval + 1) - 1;
  }
  
  // L·∫•y adIndex t·ª´ v·ªã tr√≠ ListView
  int _getAdIndexFromListViewIndex(int listViewIndex) {
    return listViewIndex ~/ (_adInterval + 1);
  }

  // T·∫£i l·∫°i qu·∫£ng c√°o hi·ªán ƒëang hi·ªÉn th·ªã
  void _reloadVisibleAds() {
    debugPrint('ƒêang t·∫£i l·∫°i qu·∫£ng c√°o...');
    _isLoading.value = true;
    
    // X√≥a qu·∫£ng c√°o ƒë√£ t·∫£i
    for (final ad in _loadedAds.values) {
      ad.dispose();
    }
    _loadedAds.clear();
    
    // T·∫£i l·∫°i qu·∫£ng c√°o
    _preloadAds();
    
    // Hi·ªán th√¥ng b√°o
    _lastResult.value = 'ƒê√£ t·∫£i l·∫°i qu·∫£ng c√°o';
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Native Ads trong ListView'),
        elevation: 1,
        actions: [
          IconButton(
            icon: const Icon(Icons.bug_report),
            tooltip: 'Debug qu·∫£ng c√°o',
            onPressed: () {
              _debugAdsStatus();
              _reloadVisibleAds();
            },
          ),
        ],
      ),
      body: Column(
        children: [
          // Hi·ªÉn th·ªã tr·∫°ng th√°i
          Obx(
            () => Padding(
              padding: const EdgeInsets.all(8.0),
              child: Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: Colors.grey.shade200,
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Column(
                  children: [
                    Text(
                      _isLoading.value
                          ? 'ƒêang t·∫£i qu·∫£ng c√°o...'
                          : 'K·∫øt qu·∫£: ${_lastResult.value}',
                      textAlign: TextAlign.center,
                      style: const TextStyle(fontStyle: FontStyle.italic),
                    ),
                    if (_loadedAds.isNotEmpty) 
                      Padding(
                        padding: const EdgeInsets.only(top: 4),
                        child: Column(
                          children: [
                            Text(
                              'ƒê√£ t·∫£i ${_loadedAds.length} qu·∫£ng c√°o ·ªü v·ªã tr√≠: ${_loadedAds.keys.join(", ")}',
                              style: const TextStyle(fontSize: 12, color: Colors.blue),
                            ),
                            const SizedBox(height: 4),
                            ElevatedButton.icon(
                              icon: const Icon(Icons.refresh, size: 16),
                              label: const Text('T·∫£i l·∫°i t·∫•t c·∫£ qu·∫£ng c√°o'),
                              style: ElevatedButton.styleFrom(
                                padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                                textStyle: const TextStyle(fontSize: 13),
                              ),
                              onPressed: _reloadVisibleAds,
                            ),
                          ],
                        ),
                      ),
                  ],
                ),
              ),
            ),
          ),

          // Danh s√°ch v·ªõi qu·∫£ng c√°o xen k·∫Ω
          Expanded(
            child: ListView.builder(
              itemCount: _totalItems,
              itemBuilder: (context, index) {
                // Ki·ªÉm tra xem v·ªã tr√≠ n√†y c√≥ ph·∫£i l√† v·ªã tr√≠ qu·∫£ng c√°o
                if (_isAdPosition(index)) {
                  debugPrint('ƒêang hi·ªÉn th·ªã v·ªã tr√≠ qu·∫£ng c√°o $index');
                  // Ki·ªÉm tra xem qu·∫£ng c√°o ƒë√£ ƒë∆∞·ª£c t·∫£i ch∆∞a
                  // Hi·ªÉn th·ªã debug info v·ªÅ qu·∫£ng c√°o ƒë√£ t·∫£i
                  debugPrint('Ki·ªÉm tra qu·∫£ng c√°o cho v·ªã tr√≠ $index. Ads ƒë√£ t·∫£i: ${_loadedAds.keys.toList()}');
                  
                  if (_loadedAds.containsKey(index)) {
                    debugPrint('ƒê√£ t√¨m th·∫•y qu·∫£ng c√°o ƒë√£ t·∫£i cho v·ªã tr√≠ $index!');
                    // Hi·ªÉn th·ªã qu·∫£ng c√°o ƒë√£ ƒë∆∞·ª£c t·∫£i
                    return Card(
                      margin: const EdgeInsets.all(8),
                      elevation: 2,
                      child: Container(
                        height: 250,
                        padding: const EdgeInsets.all(4),
                        child: AdWidget(ad: _loadedAds[index]!),
                      ),
                    );
                  } else {
                    // T·∫£i qu·∫£ng c√°o cho v·ªã tr√≠ n√†y n·∫øu ch∆∞a ƒë∆∞·ª£c t·∫£i
                    // T√≠nh v·ªã tr√≠ qu·∫£ng c√°o d·ª±a tr√™n th·ª© t·ª± ƒë√∫ng
                    int adIndex = _getAdIndexFromListViewIndex(index);
                    debugPrint('Ch∆∞a t√¨m th·∫•y qu·∫£ng c√°o cho v·ªã tr√≠ $index. T√≠nh adIndex: $adIndex');
                    _loadAd(adIndex);

                    // Hi·ªÉn th·ªã placeholder trong khi ch·ªù t·∫£i
                    return Card(
                      margin: const EdgeInsets.all(8),
                      elevation: 2,
                      child: Container(
                        height: 120,
                        alignment: Alignment.center,
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            const CircularProgressIndicator(strokeWidth: 2),
                            const SizedBox(height: 8),
                            Text('ƒêang t·∫£i qu·∫£ng c√°o cho v·ªã tr√≠ $index...'),
                            const SizedBox(height: 8),
                            TextButton.icon(
                              icon: const Icon(Icons.refresh),
                              label: const Text('Th·ª≠ l·∫°i'),
                              onPressed: () {
                                int adIndex = _getAdIndexFromListViewIndex(index);
                                debugPrint('Th·ª≠ t·∫£i l·∫°i qu·∫£ng c√°o cho adIndex: $adIndex, v·ªã tr√≠: $index');
                                _loadAd(adIndex);
                              },
                            ),
                          ],
                        ),
                      ),
                    );
                  }
                }

                // L·∫•y v·ªã tr√≠ th·ª±c trong danh s√°ch d·ªØ li·ªáu g·ªëc
                final itemIndex = _getItemIndex(index);

                // Hi·ªÉn th·ªã m·ª•c n·ªôi dung
                return Card(
                  margin: const EdgeInsets.all(8),
                  child: ListTile(
                    leading: CircleAvatar(
                      backgroundColor: Colors.deepPurple,
                      child: Text('${itemIndex + 1}'),
                    ),
                    title: Text(_items[itemIndex]),
                    subtitle: Text('ƒê√¢y l√† m√¥ t·∫£ cho m·ª•c ${itemIndex + 1}'),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}
